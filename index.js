require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const TelegramBot = require("node-telegram-bot-api");
const cors = require("cors");
const rateLimit = require("express-rate-limit");
const path = require("path");

const {
  handleWebAppData,
  handleUpdateSpins,
} = require("./routes/appPostRoutes");
const { setupAdminHandlers } = require("./admin/adminHandlers");

const User = require("./models/User");
const app = express();

const port = process.env.PORT || 3000;
const CHANNEL_ID = process.env.CHANNEL_ID;
const requiredEnv = [
  "TELEGRAM_TOKEN",
  "BOT_USERNAME",
  "MONGODB_URL",
  "WEB_APP_URL",
  "CHANNEL_ID",
  "MAINCHANNEL",
  "OTZOVCHANNEL",
];
const missingEnv = requiredEnv.filter((env) => !process.env[env]);

if (missingEnv.length > 0) {
  console.error(
    `–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnv.join(", ")}`
  );
  process.exit(1);
}

mongoose
  .connect(process.env.MONGODB_URL)
  .then(() => console.log("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"))
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
    process.exit(1);
  });

app.use(cors());
app.use(express.json());

// const limiter = rateLimit({
//   windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
//   max: 100, // –º–∞–∫—Å. 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
//   message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
// });
app.use(limiter);

app.post("/webapp-data", handleWebAppData);
app.post("/update-spins", handleUpdateSpins);

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
setupAdminHandlers(bot);

bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const username =
    msg.from.username ||
    `${msg.from.first_name || ""} ${msg.from.last_name || ""}`.trim();

  let referredBy = null;
  if (match[1] && match[1].startsWith("ref_")) {
    const referrerTelegramId = match[1].replace("ref_", "");
    const referrer = await User.findOne({ telegramId: referrerTelegramId });
    if (referrer) {
      referredBy = referrer._id;
      console.log(
        `–†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.telegramId})`
      );
    } else {
      console.log("–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  }

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (user) {
      let memberStatus;
      try {
        const res = await bot.getChatMember(CHANNEL_ID, chatId);
        memberStatus = res.status;
        console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
        memberStatus = "left";
      }

      if (["member", "administrator", "creator"].includes(memberStatus)) {
        await sendMainFunctionalityMessage(chatId, user);
      } else {
        await sendSubscriptionPrompt(chatId, user);
      }
    } else {
      user = new User({
        telegramId: chatId,
        username: username,
        referredBy: referredBy,
        spins: 3,
      });
      await user.save();
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username} (ID: ${chatId})`);

      if (referredBy) {
        await User.findByIdAndUpdate(referredBy, {
          $push: { referrals: user._id },
          $inc: { spins: 1 },
        });
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, spins —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 1`
        );
      }

      await sendSubscriptionPrompt(chatId, user);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const callbackQueryId = query.id;

  console.log(
    `–ü–æ–ª—É—á–µ–Ω callback_query: ${callbackQueryId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${query.from.id}`
  );

  if (data === "check_subscribe") {
    try {
      await bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º!",
      });
      console.log(`–û—Ç–≤–µ—Ç –Ω–∞ callback_query ${callbackQueryId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);

      let memberStatus;
      try {
        const res = await bot.getChatMember(CHANNEL_ID, chatId);
        memberStatus = res.status;
        console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
        memberStatus = "left";
      }

      const user = await User.findOne({ telegramId: chatId });

      if (["member", "administrator", "creator"].includes(memberStatus)) {
        await sendMainFunctionalityMessage(chatId, user, messageId);
      } else {
        const newText = `
–£–≤—ã, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.
        `;
        const inlineKeyboard = [
          [
            {
              text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
              url: "https://t.me/+78tt3taFIjA0Njky",
            },
          ],
          [
            {
              text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
              callback_data: "check_subscribe",
            },
          ],
        ];

        try {
          await bot.deleteMessage(chatId, messageId);

          const imagePath = path.join(__dirname, "img", "pursh.jpg");
          await bot.sendPhoto(chatId, imagePath, {
            caption: newText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard }
          });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error);
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
});

async function sendMainFunctionalityMessage(chatId, user, messageId = null) {

  if (messageId) {
    try {
      await bot.deleteMessage(chatId, messageId);
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} —É–¥–∞–ª–µ–Ω–æ.`);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID ${messageId}:`, err);
    }
  }
  try {
    const referralsCount = await User.countDocuments({ referredBy: user._id });
    const userReferralCode = `ref_${user.telegramId}`;
    const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userReferralCode}`;
    user.spins = user.spins || 0;
    await user.save();

    const webAppButton = {
      text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      web_app: { url: process.env.WEB_APP_URL },
    };

    const newsButton = {
      text: "–ù–æ–≤–æ—Å—Ç–∏",
      url: process.env.MAINCHANNEL,
    };

    const reviewsButton = {
      text: "–û—Ç–∑—ã–≤—ã",
      url: process.env.OTZOVCHANNEL,
    };

    const message = `
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

–≠—Ç–æ <b>WB –†—É–ª–µ—Ç–∫–∞</b> ‚Äî –ø–µ—Ä–≤–æ–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫—É–ø–æ–Ω–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Wildberries!

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<a href="${referralLink}">${referralLink}</a>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${referralsCount}</b>
‚Ä¢ –í—Ä–∞—â–µ–Ω–∏–π: <b>${user.spins}</b>

–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üçÄ
`;

    const replyMarkup = {
      inline_keyboard: [[webAppButton], [newsButton, reviewsButton]],
    };

    const imagePath = path.join(__dirname, "img", "main.jpg");

    await bot.sendPhoto(chatId, imagePath, {
      caption: message,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    });

    console.log(
      `–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ sendMainFunctionalityMessage:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

async function sendSubscriptionPrompt(chatId, user) {
  const welcomeText = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –ª—É—á—à–µ–π Telegram-—Ä—É–ª–µ—Ç–∫–µ –ø–æ WB.

1) –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
2) –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª
`;

  const inlineKeyboard = [
    [
      {
        text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
        url: process.env.MAINCHANNEL,
      },
    ],
    [
      {
        text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data: "check_subscribe",
      },
    ],
  ];

  const imagePath = path.join(__dirname, "img", "pursh.jpg");

  try {
    await bot.sendPhoto(chatId, imagePath, {
      caption: welcomeText,
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: inlineKeyboard },
    });

    console.log(
      `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:",
      error
    );
  }
}

app.use((req, res) => {
  res.status(404).send({ success: false, message: "Endpoint not found" });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});