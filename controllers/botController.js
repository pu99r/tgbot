// controllers/botController.js
const TelegramBot = require("node-telegram-bot-api");
const path = require("path");
const User = require("../models/User");
const logger = require("../utils/logger");

const CHANNEL_ID = process.env.CHANNEL_ID;
async function activateUser(user) {
  if (!user.activated) {
    // –í—ã–¥–∞—ë–º 3 —Å–ø–∏–Ω–∞ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.spins = 3;
    user.activated = true;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–∞—ë–º –µ–º—É +1 —Å–ø–∏–Ω
    if (user.referredBy) {
      await User.findByIdAndUpdate(user.referredBy, {
        $push: { referrals: user._id },
        $inc: { spins: 1 },
      });
      logger.info(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ä–µ—Ñ–µ—Ä–µ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω 1 —Å–ø–∏–Ω`
      );
    }

    await user.save();
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  }
}

// -- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø /start --
const handleStart = async (bot, msg, match) => {
  const chatId = msg.chat.id;
  const username =
    msg.from.username ||
    `${msg.from.first_name || ""} ${msg.from.last_name || ""}`.trim();

  let referredBy = null;
  let clickId = "none";

  if (match[1]) {
    const params = match[1].split("_");
    if (params.length >= 2) {
      if (params[0] === "ref") {
        const referrerTelegramId = params[1];
        try {
          const referrer = await User.findOne({ telegramId: referrerTelegramId });
          if (referrer) {
            referredBy = referrer._id;
            logger.info(
              `–†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.telegramId})`
            );
          } else {
            logger.warn("–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
          }
        } catch (error) {
          logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:", error);
        }
      } else if (params[0] === "kt") {
        clickId = params[1];
        logger.info(`Click ID –Ω–∞–π–¥–µ–Ω: ${clickId}`);
      }
    }
  }

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (!user) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = new User({
        telegramId: chatId,
        username,
        referredBy,
        spins: 0, // –±–µ–∑ —Å–ø–∏–Ω–æ–≤ ‚Äî –≤—ã–¥–∞–¥–∏–º –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        activated: false, // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å —Å–ø–∏–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
        click_id: clickId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º click_id
      });
      await user.save();
      logger.info(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username} (ID: ${chatId})`);
    } else if (clickId !== "none" && user.click_id === "none") {
      // –û–±–Ω–æ–≤–ª—è–µ–º click_id, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      user.click_id = clickId;
      await user.save();
      logger.info(`Click ID –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${chatId})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    let memberStatus;
    try {
      const res = await bot.getChatMember(CHANNEL_ID, chatId);
      memberStatus = res.status;
      logger.info(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
    } catch (err) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
      memberStatus = "left";
    }

    if (["member", "administrator", "creator"].includes(memberStatus)) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º (–µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      await activateUser(user);
      await sendMainFunctionalityMessage(bot, chatId, user);
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
      await sendSubscriptionPrompt(bot, chatId);
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK_QUERY --
const handleCallbackQuery = async (bot, query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const callbackQueryId = query.id;

  logger.info(
    `–ü–æ–ª—É—á–µ–Ω callback_query: ${callbackQueryId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${query.from.id}`
  );

  if (data === "check_subscribe") {
    try {
      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
      await bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º!",
      });
      logger.info(`–û—Ç–≤–µ—Ç –Ω–∞ callback_query ${callbackQueryId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);

      let memberStatus;
      try {
        const res = await bot.getChatMember(CHANNEL_ID, chatId);
        memberStatus = res.status;
        logger.info(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
      } catch (err) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
        memberStatus = "left";
      }

      const user = await User.findOne({ telegramId: chatId });

      if (!user) {
        // –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        logger.warn(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–∏ check_subscribe`
        );
        await bot.sendMessage(
          chatId,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–±—Ä–∞—Ç—å /start."
        );
        return;
      }

      if (["member", "administrator", "creator"].includes(memberStatus)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await activateUser(user);
        await sendMainFunctionalityMessage(bot, chatId, user, messageId);
      } else {
        // –ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        const newText = `
–£–≤—ã, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 —Å–ø–∏–Ω–∞ –Ω–∞ —Å—á–µ—Ç.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.
        `;
        const inlineKeyboard = [
          [
            {
              text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
              url: process.env.MAINCHANNEL,
            },
          ],
          [
            {
              text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
              callback_data: "check_subscribe",
            },
          ],
        ];

        try {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await bot.deleteMessage(chatId, messageId);

          const imagePath = path.join(__dirname, "../img", "pursh.png");
          await bot.sendPhoto(chatId, imagePath, {
            caption: newText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
        } catch (error) {
          logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", error);
        }
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error);
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
};

// -- –û–¢–ü–†–ê–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø --
const sendMainFunctionalityMessage = async (
  bot,
  chatId,
  user,
  messageId = null
) => {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω messageId, —Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (messageId) {
    try {
      await bot.deleteMessage(chatId, messageId);
      logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} —É–¥–∞–ª–µ–Ω–æ.`);
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
    }
  }

  try {
    const referralsCount = await User.countDocuments({ referredBy: user._id });
    const userReferralCode = `ref_${user.telegramId}`;
    const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userReferralCode}`;
    user.spins = user.spins || 0;
    await user.save();

    const webAppButton = {
      text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      web_app: { url: process.env.WEB_APP_URL },
    };
    const newsButton = {
      text: "–ù–æ–≤–æ—Å—Ç–∏",
      url: process.env.MAINCHANNEL,
    };
    const reviewsButton = {
      text: "–û—Ç–∑—ã–≤—ã",
      url: process.env.OTZOVCHANNEL,
    };

    const message = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

<b>WB –†—É–ª–µ—Ç–∫–∞</b> ‚Äî —ç—Ç–æ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ <b>—Ç—ã—Å—è—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!  
–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî <b>–ø–æ–±–µ–¥–∏—Ç –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</b>.

üì¢ <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</b>  
–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è:  
<a href="${referralLink || "#"}">${referralLink || "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"}</a>  
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>${referralsCount || 0}</b>
‚Ä¢ –°–ø–∏–Ω—ã: <b>${user.spins || 0}</b>
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏: <b>${user.registrationDate || 0}</b>
‚Ä¢ –°–ø–∏–Ω–æ–≤ –æ—Ç–∫—Ä—É—á–µ–Ω–æ: <b>${user.spentSpins || 0}</b>
‚Ä¢ –ú–µ–π–Ω –æ—Ñ—Ñ–µ—Ä—ã: <b>${user.complete || 0}</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏—è: <b>${user.offercomplete || 0}</b>
‚Ä¢ –ë–∞–ª–∞–Ω—Å: <b>${user.balance || 0}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É: <b>${user.activated || 0}</b>
‚Ä¢ click_id: <b>${user.click_id || 0}</b>
üî• –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã –∂–¥—É—Ç –≤–∞—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∏ —Å—Ç–∞–Ω—å—Ç–µ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üçÄ
`;

    const replyMarkup = {
      inline_keyboard: [[webAppButton], [newsButton, reviewsButton]],
    };

    const imagePath = path.join(__dirname, "../img", "main.png");

    await bot.sendPhoto(chatId, imagePath, {
      caption: message,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    });

    logger.info(
      `–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ sendMainFunctionalityMessage:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –ü–†–û–°–¨–ë–ê –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø --
const sendSubscriptionPrompt = async (bot, chatId) => {
  const welcomeText = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB –†—É–ª–µ—Ç–∫—É!</b>

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>3 –ë–ï–°–ü–õ–ê–¢–ù–´–• –ü–†–û–ö–†–£–¢–ê –ö–û–õ–ï–°–ê</b>, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. 
–≠—Ç–æ –≤–∞—à —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã –Ω–∞ –ø–æ–∫—É–ø–∫–∏.

üõ°Ô∏è <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>
1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <b>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</b>, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª</b>.

–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —à–∞–≥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, –∞ –Ω–µ –±–æ—Ç.

üéÅ <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</b> üöÄ
`;

  const inlineKeyboard = [
    [
      {
        text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
        url: process.env.MAINCHANNEL,
      },
    ],
    [
      {
        text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data: "check_subscribe",
      },
    ],
  ];

  const imagePath = path.join(__dirname, "../img", "pursh.png");

  try {
    await bot.sendPhoto(chatId, imagePath, {
      caption: welcomeText,
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: inlineKeyboard },
    });

    logger.info(
      `–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
};

// -- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í --
const setupBotHandlers = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start(?: (.+))?/, (msg, match) => {
    handleStart(bot, msg, match);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
  bot.on("callback_query", (query) => {
    handleCallbackQuery(bot, query);
  });
};

module.exports = { setupBotHandlers };