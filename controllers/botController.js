// controllers/botController.js
const TelegramBot = require("node-telegram-bot-api");
const path = require("path");
const User = require("../models/User");
const logger = require("../utils/logger");


// -- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø /start --
const handleStart = async (bot, msg, match) => {
  const chatId = msg.chat.id;
  const username =
    msg.from.username ||
    `${msg.from.first_name || ""} ${msg.from.last_name || ""}`.trim();

  let referredBy = null;
  let clickId = "none";

  if (match[1]) {
    const params = match[1].split("_");
    if (params.length >= 2) {
      if (params[0] === "ref") {
        const referrerTelegramId = params[1];
        try {
          const referrer = await User.findOne({ telegramId: referrerTelegramId });
          if (referrer) {
            referredBy = referrer._id;
            logger.info(
              `–†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.telegramId})`
            );
          } else {
            logger.warn("–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
          }
        } catch (error) {
          logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:", error);
        }
      } else if (params[0] === "kt") {
        clickId = params[1];
        logger.info(`Click ID –Ω–∞–π–¥–µ–Ω: ${clickId}`);
      }
    }
  }

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (!user) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = new User({
        telegramId: chatId,
        username,
        referredBy,
        spins: 0,
        click_id: clickId,
      });
      await user.save();
      logger.info(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username} (ID: ${chatId})`);

      const addReferral = async (referredBy, user) => {
        if (referredBy) {
          await User.findByIdAndUpdate(referredBy, {
            $push: { referrals: { user: user._id } },
          });
        }
      };
      if (referredBy) {
        await addReferral(referredBy, user);
      }
    }

    // –ó–¥–µ—Å—å —É–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendMainFunctionalityMessage(bot, chatId, user);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –û–¢–ü–†–ê–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (–û–°–¢–ê–í–õ–ï–ù–ê –ü–û –ü–†–û–°–¨–ë–ï) --
const sendMainFunctionalityMessage = async (bot, chatId, user, messageId = null) => {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω messageId, —Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (messageId) {
    try {
      await bot.deleteMessage(chatId, messageId);
      logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} —É–¥–∞–ª–µ–Ω–æ.`);
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
    }
  }

  try {
    const referralsCount = await User.countDocuments({ referredBy: user._id });
    const userReferralCode = `ref_${user.telegramId}`;
    const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userReferralCode}`;
    user.spins = user.spins || 0;
    await user.save();
    const webAppButton = {
      text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      web_app: { url: process.env.WEB_APP_URL },
    };
    const newsButton = {
      text: "–ù–æ–≤–æ—Å—Ç–∏",
      url: process.env.MAINCHANNEL,
    };
    const reviewsButton = {
      text: "–û—Ç–∑—ã–≤—ã",
      url: process.env.OTZOVCHANNEL,
    };
    const message = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

<b>WB –†—É–ª–µ—Ç–∫–∞</b> ‚Äî —ç—Ç–æ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ <b>—Ç—ã—Å—è—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî <b>–ø–æ–±–µ–¥–∏—Ç –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</b>.

üì¢ <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</b>
–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è:
<a href="${referralLink || "#"}">${referralLink || "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"}</a>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>${referralsCount || 0}</b>
‚Ä¢ –°–ø–∏–Ω—ã: <b>${user.spins || 0}</b>
‚Ä¢ –°–ø–∏–Ω–æ–≤ –æ—Ç–∫—Ä—É—á–µ–Ω–æ: <b>${user.spentSpins || 0}</b>
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏: <b>${user.registrationDate || 0}</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏—è: <b>${user.complete || 0}</b>
‚Ä¢ –ú—ç–π–Ω –æ—Ñ—Ñ–µ—Ä—ã: <b>${user.offercomplete || 0}</b>
‚Ä¢ –ë–∞–ª–∞–Ω—Å: <b>${user.balance || 0}</b>
‚Ä¢ click_id: <b>${user.click_id || 0}</b>

üî• –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã –∂–¥—É—Ç –≤–∞—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∏ —Å—Ç–∞–Ω—å—Ç–µ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üçÄ
`;

    const replyMarkup = {
      inline_keyboard: [[webAppButton], [newsButton, reviewsButton]],
    };

    const imagePath = path.join(__dirname, "../img", "main.png");

    await bot.sendPhoto(chatId, imagePath, {
      caption: message,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    });

    logger.info(
      `–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ sendMainFunctionalityMessage:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í --
const setupBotHandlers = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start(?: (.+))?/, (msg, match) => {
    handleStart(bot, msg, match);
  });

  // –£–¥–∞–ª–∏–ª–∏ –ª–æ–≥–∏–∫—É callback_query, —Ç.–∫. –±—ã–ª–∞ –∑–∞–≤—è–∑–∞–Ω–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É/–∞–∫—Ç–∏–≤–∞—Ü–∏—é
};

module.exports = { setupBotHandlers, sendMainFunctionalityMessage };