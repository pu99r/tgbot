// controllers/botController.js
const TelegramBot = require("node-telegram-bot-api");
const path = require("path");
const User = require("../models/User");
const logger = require("../utils/logger");

// -- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø /start --
const handleStart = async (bot, msg, match) => {
  const chatId = msg.chat.id;
  const username =
    msg.from.username ||
    `${msg.from.first_name || ""} ${msg.from.last_name || ""}`.trim();

  let referredBy = null;
  let clickId = "none";

  if (match[1]) {
    const params = match[1].split("_");
    if (params.length >= 2) {
      if (params[0] === "ref") {
        const referrerTelegramId = params[1];
        try {
          const referrer = await User.findOne({ telegramId: referrerTelegramId });
          if (referrer) {
            referredBy = referrer._id;
            logger.info(
              `–†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.telegramId})`
            );
          } else {
            logger.warn("–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
          }
        } catch (error) {
          logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:", error);
        }
      } else if (params[0] === "kt") {
        clickId = params[1];
        logger.info(`Click ID –Ω–∞–π–¥–µ–Ω: ${clickId}`);
      }
    }
  }

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (!user) {
      user = new User({
        telegramId: chatId,
        username,
        referredBy,
        spins: 0,
        click_id: clickId,
      });
      await user.save();
      logger.info(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username} (ID: ${chatId})`);

      const addReferral = async (referredBy, user) => {
        if (referredBy) {
          await User.findByIdAndUpdate(referredBy, {
            $push: { referrals: { user: user._id } },
          });
        }
      };
      if (referredBy) {
        await addReferral(referredBy, user);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    let userSubbed = false;
    try {
      const member = await bot.getChatMember(process.env.MAINCHANNEL_ID, chatId);
      if (
        member.status === "member" ||
        member.status === "creator" ||
        member.status === "administrator"
      ) {
        userSubbed = true;
      }
    } catch (error) {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
      // –∏–ª–∏ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç. –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    }

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendMainFunctionalityMessage(bot, chatId, user);

    // 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
    if (!userSubbed && !user.complete.includes("MainChanel1")) {
      await sendBonusSubscriptionMessage(bot, chatId);
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –û–¢–ü–†–ê–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø --
const sendMainFunctionalityMessage = async (
  bot,
  chatId,
  user,
  messageId = null
) => {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω messageId, —Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (messageId) {
    try {
      await bot.deleteMessage(chatId, messageId);
      logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} —É–¥–∞–ª–µ–Ω–æ.`);
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
    }
  }

  try {
    const referralsCount = await User.countDocuments({ referredBy: user._id });
    const userReferralCode = `ref_${user.telegramId}`;
    const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userReferralCode}`;

    user.spins = user.spins || 0;
    await user.save();

    // 1. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ offercomplete
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ JSON-—Å—Ç—Ä–æ–∫–µ –≤–∏–¥–∞ {"group":"1","name":"name1","status":"reg"}
    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥
    let offercompleteInfo = "";
    if (Array.isArray(user.offercomplete) && user.offercomplete.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ–±—ä–µ–∫—Ç
      const parsedOffers = user.offercomplete.map((item) => {
        try {
          return JSON.parse(item);
        } catch (err) {
          // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
          return { raw: item };
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–æ–∫
      offercompleteInfo = parsedOffers
        .map((offer, index) => {
          // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π {group, name, status}
          if (offer.group && offer.name && offer.status) {
            return `   ${index + 1}. –ì—Ä—É–ø–ø–∞: <b>${
              offer.group
            }</b>, –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${offer.name}</b>, –°—Ç–∞—Ç—É—Å: <b>${
              offer.status
            }</b>`;
          } else if (offer.raw) {
            // –ï—Å–ª–∏ —ç—Ç–æ "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            return `   ${index + 1}. (–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å) <b>${
              offer.raw
            }</b>`;
          }
          // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –Ω–æ –±–µ–∑ –ø–æ–ª—è raw
          return `   ${index + 1}. (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) <b>${JSON.stringify(
            offer
          )}</b>`;
        })
        .join("\n");
    } else {
      offercompleteInfo = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º.";
    }

    // 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message1 = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

<a href="${referralLink || "#"}">${referralLink || "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"}</a>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>${referralsCount || 0}</b>
‚Ä¢ –°–ø–∏–Ω—ã: <b>${user.spins || 0}</b>
‚Ä¢ –°–ø–∏–Ω–æ–≤ –æ—Ç–∫—Ä—É—á–µ–Ω–æ: <b>${user.spentSpins || 0}</b>
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏: <b>${user.registrationDate || "n/a"}</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏—è: <b>${user.complete.join(", ") || "–Ω–µ—Ç"}</b>
‚Ä¢ –ë–∞–ª–∞–Ω—Å: <b>${user.balance || 0}</b>
‚Ä¢ click_id: <b>${user.click_id || 0}</b>

<b>–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ (offercomplete):</b>
${offercompleteInfo}
`.trim();

const message = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

<b>Stars Wheel</b> ‚Äî –≤–∞—à —à–∞–Ω—Å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å <b>—Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!  
üéÅ –°—Ä–µ–¥–∏ –ø—Ä–∏–∑–æ–≤: Phone 16 Pro, AirPods Pro, –Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å–∞ –∏ <b>Telegram Stars</b> ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram!
–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á–µ—Å—Ç–Ω–æ—Å—Ç—å, –ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.

üì¢ <b>–£–≤–µ–ª–∏—á—å—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã:</b>  
–î–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å:  
<a href="${referralLink || "#"}">${referralLink || "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"}</a>  
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>${referralsCount || 0}</b>

üöÄ <b>–ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ, —Å–æ–±–∏—Ä–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b> üçÄ
`.trim();
    // 3. –ö–Ω–æ–ø–∫–∏
    const webAppButton = {
      text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      web_app: { url: process.env.WEB_APP_URL },
    };
    const newsButton = {
      text: "–ù–æ–≤–æ—Å—Ç–∏",
      url: process.env.MAINCHANNEL,
    };
    const reviewsButton = {
      text: "–û—Ç–∑—ã–≤—ã",
      url: process.env.OTZOVCHANNEL,
    };

    const manager = {
      text: "–ú–µ–Ω–µ–¥–∂–µ—Ä",
      url: process.env.MANAGER,
    };

    const replyMarkup = {
      inline_keyboard: [[webAppButton], [manager], [newsButton, reviewsButton]],
    };

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const imagePath = path.join(__dirname, "../img", "main.png");

    await bot.sendPhoto(chatId, imagePath, {
      caption: message,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    });

    logger.info(
      `–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ sendMainFunctionalityMessage:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

// -- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í --
const setupBotHandlers = (bot) => {
  bot.onText(/\/start(?: (.+))?/, (msg, match) => {
    handleStart(bot, msg, match);
  });
  bot.on("callback_query", async (query) => {
    const { message, data, from } = query;
    const chatId = message.chat.id;
  
    if (data === "check_mainchannel_sub") {
      try {
        const member = await bot.getChatMember(process.env.MAINCHANNEL_ID, from.id);
  
        if (
          member.status === "member" ||
          member.status === "creator" ||
          member.status === "administrator"
        ) {
          const user = await User.findOne({ telegramId: chatId });
  
          // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
          if (!user.complete.includes("MainChanel1")) {
            user.spins += 3;
            user.complete.push("MainChanel1");
            await user.save();
  
            await bot.deleteMessage(chatId, message.message_id);
            await bot.sendMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +3 —Å–ø–∏–Ω–∞.");
          } else {
            await bot.deleteMessage(chatId, message.message_id);
            await bot.answerCallbackQuery(query.id, {
              text: "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É.",
              show_alert: true
            });
          }
        } else {
          await bot.answerCallbackQuery(query.id, {
            text: "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert: true
          });
        }
      } catch (err) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
        await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  });
};
// -- –ë–û–ù–£–° --
const sendBonusSubscriptionMessage = async (bot, chatId) => {
  const checkSubscriptionButton = {
    text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    callback_data: "check_mainchannel_sub",
  };
  const channelButton = {
    text: "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
    url: process.env.MAINCHANNEL,
  };

  const replyMarkup = {
    inline_keyboard: [[channelButton], [checkSubscriptionButton]],
  };

  const message = `
<b>üéÅ –ü–æ–ª—É—á–∏ +3 —Å–ø–∏–Ω–∞!</b>

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href="${process.env.MAINCHANNEL}">–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a> –∏ –ø–æ–ª—É—á–∏ <b>3 —Å–ø–∏–Ω–∞</b> –Ω–∞ –±–∞–ª–∞–Ω—Å!

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
`;

  const sentMessage = await bot.sendMessage(chatId, message, {
    parse_mode: "HTML",
    reply_markup: replyMarkup,
  });

  return sentMessage.message_id;
};

module.exports = { setupBotHandlers, sendMainFunctionalityMessage, sendBonusSubscriptionMessage};
