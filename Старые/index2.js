require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const TelegramBot = require("node-telegram-bot-api");
const cors = require("cors");
const rateLimit = require("express-rate-limit");

const User = require("../models/User");

const app = express();
const port = process.env.PORT || 3000;

const CHANNEL_ID = process.env.CHANNEL_ID;

const requiredEnv = [
  "TELEGRAM_TOKEN",
  "BOT_USERNAME",
  "MONGODB_URL",
  "WEB_APP_URL",
  "CHANNEL_ID",
  "MAINCHANNEL",
  "OTZOVCHANNEL"
];
const missingEnv = requiredEnv.filter((env) => !process.env[env]);

if (missingEnv.length > 0) {
  console.error(
    `–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnv.join(", ")}`
  );
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –±–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–ø—Ü–∏–π
mongoose
  .connect(process.env.MONGODB_URL)
  .then(() => console.log("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"))
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
    process.exit(1);
  });

app.use(cors());
app.use(express.json());

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å. 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
});
app.use(limiter);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ initData –∏–∑ Web App
function parseInitData(initData) {
  try {
    const params = new URLSearchParams(initData);
    const userParam = params.get("user");
    if (!userParam) return null;
    return JSON.parse(decodeURIComponent(userParam));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:", error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start =======
bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const username =
    msg.from.username ||
    `${msg.from.first_name || ""} ${msg.from.last_name || ""}`.trim();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  let referredBy = null;
  if (match[1] && match[1].startsWith("ref_")) {
    const referrerTelegramId = match[1].replace("ref_", "");
    const referrer = await User.findOne({ telegramId: referrerTelegramId });
    if (referrer) {
      referredBy = referrer._id;
      console.log(
        `–†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.telegramId})`
      );
    } else {
      console.log("–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await User.findOne({ telegramId: chatId });

    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      let memberStatus;
      try {
        const res = await bot.getChatMember(CHANNEL_ID, chatId);
        memberStatus = res.status;
        console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
        memberStatus = "left";
      }

      if (["member", "administrator", "creator"].includes(memberStatus)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMainFunctionalityMessage(chatId, user);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await sendSubscriptionPrompt(chatId, user);
      }
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      user = new User({
        telegramId: chatId,
        username: username,
        referredBy: referredBy,
        spins: 0,
      });
      await user.save();
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username} (ID: ${chatId})`);

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ referrals –∏ +1 spin —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      if (referredBy) {
        await User.findByIdAndUpdate(referredBy, {
          $push: { referrals: user._id },
          $inc: { spins: 1 },
        });
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, spins —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 1`
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
      await sendSubscriptionPrompt(chatId, user);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// ======= –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è =======
async function sendSubscriptionPrompt(chatId, user) {
  const welcomeText = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –ª—É—á—à–µ–π Telegram-—Ä—É–ª–µ—Ç–∫–µ –ø–æ WB.

1) –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
2) –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª
  `;

  const inlineKeyboard = [
    [
      {
        text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
        url: `${process.env.MAINCHANNEL}`, // –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
      },
    ],
    [
      {
        text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data: "check_subscribe", // –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      },
    ],
  ];

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const sentMessage = await bot.sendMessage(chatId, welcomeText, {
      reply_markup: { inline_keyboard: inlineKeyboard },
      parse_mode: "HTML", // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    });

    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å sentMessage.message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª—å User –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id
    // –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:",
      error
    );
  }
}

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const callbackQueryId = query.id;

  console.log(
    `–ü–æ–ª—É—á–µ–Ω callback_query: ${callbackQueryId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${query.from.id}`
  );

  if (data === "check_subscribe") {
    try {
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
      await bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º!",
      });
      console.log(`–û—Ç–≤–µ—Ç –Ω–∞ callback_query ${callbackQueryId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      let memberStatus;
      try {
        const res = await bot.getChatMember(CHANNEL_ID, chatId);
        memberStatus = res.status;
        console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –≤ –∫–∞–Ω–∞–ª–µ: ${memberStatus}`);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getChatMember:", err);
        memberStatus = "left";
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const user = await User.findOne({ telegramId: chatId });

      if (["member", "administrator", "creator"].includes(memberStatus)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMainFunctionalityMessage(chatId, user, messageId);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        const text = `
–£–≤—ã, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.
        `;
        const inlineKeyboard = [
          [
            {
              text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
              url: "https://t.me/+78tt3taFIjA0Njky", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            },
          ],
          [
            {
              text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
              callback_data: "check_subscribe", // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É –∂–µ callback_data
            },
          ],
        ];

        try {
          await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: inlineKeyboard },
            parse_mode: "HTML", // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          });
          console.log(
            `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.`
          );
        } catch (editError) {
          if (
            editError.response &&
            editError.response.body &&
            editError.response.body.description &&
            editError.response.body.description.includes(
              "message is not modified"
            )
          ) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            console.log(
              "–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ. –û—à–∏–±–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞."
            );
          } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            throw editError; // –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –æ–±—â–∏–π catch
          }
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
      if (
        error.response &&
        error.response.body &&
        error.response.body.description &&
        error.response.body.description.includes("message is not modified")
      ) {
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      } else {
        // –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(
          chatId,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
    }
  }
});

async function sendMainFunctionalityMessage(chatId, user, messageId = null) {
    try {
      // –°—á–∏—Ç–∞–µ–º —á–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const referralsCount = await User.countDocuments({ referredBy: user._id });
  
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∫–æ–¥:
      const userReferralCode = `ref_${user.telegramId}`;
  
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:
      const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userReferralCode}`;
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      user.spins = user.spins || 0;
      await user.save();
  
      // –ö–Ω–æ–ø–∫–∏
      const webAppButton = {
        text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app: { url: process.env.WEB_APP_URL },
      };
  
      const newsButton = {
        text: "–ù–æ–≤–æ—Å—Ç–∏",
        url: process.env.MAINCHANNEL, // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
      };
  
      const reviewsButton = {
        text: "–û—Ç–∑—ã–≤—ã",
        url: process.env.OTZOVCHANNEL, // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤
      };
  
      const message = `
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!</b>

–≠—Ç–æ <b>WB –†—É–ª–µ—Ç–∫–∞</b> ‚Äî –ø–µ—Ä–≤–æ–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫—É–ø–æ–Ω–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Wildberries!

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<a href="${referralLink}">${referralLink}</a>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${referralsCount}</b>
‚Ä¢ –í—Ä–∞—â–µ–Ω–∏–π: <b>${user.spins}</b>

–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üçÄ
`;
  
      const replyMarkup = {
        inline_keyboard: [
          [webAppButton],
          [newsButton, reviewsButton]
        ],
      };
  
      if (messageId) {
        // –ï—Å–ª–∏ messageId –ø–µ—Ä–µ–¥–∞–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "HTML",
          disable_web_page_preview: true,
          reply_markup: replyMarkup,
        });
        console.log(
          `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.`
        );
      } else {
        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.sendMessage(chatId, message, {
          parse_mode: "HTML",
          disable_web_page_preview: true,
          reply_markup: replyMarkup,
        });
        console.log(`–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}.`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ sendMainFunctionalityMessage:", error);
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }

app.post("/webapp-data", async (req, res) => {
  try {
    const { initData } = req.body;
    if (!initData) {
      return res
        .status(400)
        .json({ success: false, message: "initData –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω." });
    }

    const userObj = parseInitData(initData);
    if (!userObj) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData." });
    }

    const telegramId = userObj.id;
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    const referralsCount = await User.countDocuments({ referredBy: user._id });
    const userReferralCode = `ref_${user.telegramId}`;

    res.send({
      success: true,
      referralCode: userReferralCode,
      botUsername: process.env.BOT_USERNAME,
      referralsCount,
      spins: user.spins,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ /webapp-data:", error);
    res
      .status(500)
      .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});

app.post("/update-spins", async (req, res) => {
  try {
    const { initData, operation } = req.body;

    if (!initData || !operation) {
      return res
        .status(400)
        .json({
          success: false,
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å initData –∏ operation (plus/minus).",
        });
    }

    if (!["plus", "minus"].includes(operation)) {
      return res
        .status(400)
        .json({
          success: false,
          message: "operation –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'plus' –∏–ª–∏ 'minus'.",
        });
    }

    const userObj = parseInitData(initData);
    if (!userObj) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData." });
    }

    const telegramId = userObj.id;
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    if (operation === "plus") {
      user.spins += 1;
    } else {
      // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã spins –Ω–µ —É—Ö–æ–¥–∏–ª –≤ –º–∏–Ω—É—Å
      user.spins = Math.max(user.spins - 1, 0);
    }

    await user.save();

    return res.json({
      success: true,
      spins: user.spins,
      message: `Spins —É—Å–ø–µ—à–Ω–æ ${
        operation === "plus" ? "—É–≤–µ–ª–∏—á–µ–Ω—ã" : "—É–º–µ–Ω—å—à–µ–Ω—ã"
      }.`,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ /update-spins:", error);
    return res
      .status(500)
      .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});

app.use((req, res) => {
  res.status(404).send({ success: false, message: "Endpoint not found" });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
