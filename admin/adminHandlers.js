// admin/adminHandlers.js
const fs = require("fs");
const path = require("path");
const ADMIN_ID = 1370034279; // –≤–∞—à –∞–¥–º–∏–Ω—Å–∫–∏–π ID
const User = require("../models/User");

const codesFilePath = path.join(__dirname, "../codes.txt");

// –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
let isWaitingForMessage = false; // –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
let isWaitingForCoupons = false; // –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤

const setupAdminHandlers = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;

    if (chatId !== ADMIN_ID) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }

    try {
      const users = await User.find({}, "telegramId username");
      const userCount = users.length;
      const message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞: ${userCount}</b>`;
      await bot.sendMessage(chatId, message, { parse_mode: "HTML" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stats:", error);
      bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
    }
  });
  // –ö–æ–º–∞–Ω–¥–∞ /mes ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
  bot.onText(/\/mes/, async (msg) => {
    const chatId = msg.chat.id;
    if (chatId !== ADMIN_ID) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }

    isWaitingForMessage = true;
    await bot.sendMessage(
      chatId,
      "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. " +
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π, —É–∫–∞–∑–∞–≤:\n" +
        "`LinkTitle=–¢–µ–∫—Å—Ç–ö–Ω–æ–ø–∫–∏`\n" +
        "`LinkUrl=https://...`\n\n" +
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ <b>-</b>.",
      { parse_mode: "HTML" }
    );
  });
  // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (chatId !== ADMIN_ID) return;
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/", –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞
    if (msg.text && msg.text.startsWith("/")) return;

    // --- 1) –õ–æ–≥–∏–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    if (isWaitingForMessage) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
      if (msg.text && msg.text.trim() === "-") {
        isWaitingForMessage = false;
        return bot.sendMessage(chatId, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      }

      try {
        // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await User.find({}, "telegramId");
        let successCount = 0;

        // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ)
        if (msg.photo && msg.photo.length > 0) {
          // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–∏ —Ñ–æ—Ç–æ, –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å caption
          // –ü–∞—Ä—Å–∏–º caption –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
          const caption = msg.caption || "";

          // –î–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          let linkTitle = null;
          let linkUrl = null;

          // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏—Ç—å caption –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
          const lines = caption.split("\n").map((line) => line.trim());
          // –°–æ–±–µ—Ä—ë–º –≤—Å—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          let finalCaption = [];

          for (const line of lines) {
            if (line.startsWith("LinkTitle=")) {
              linkTitle = line.replace("LinkTitle=", "").trim();
            } else if (line.startsWith("LinkUrl=")) {
              linkUrl = line.replace("LinkUrl=", "").trim();
            } else {
              finalCaption.push(line);
            }
          }

          // –°–æ–±–∏—Ä–∞–µ–º caption –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
          const messageText = finalCaption.join("\n");

          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          const sendOptions = {
            parse_mode: "HTML",
          };

          // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏ title, –∏ url, –¥–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É
          if (linkTitle && linkUrl) {
            sendOptions.reply_markup = {
              inline_keyboard: [
                [
                  {
                    text: linkTitle,
                    url: linkUrl,
                  },
                ],
              ],
            };
          }

          // –†–∞—Å—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
          for (const user of users) {
            try {
              await bot.sendPhoto(user.telegramId, msg.photo[msg.photo.length - 1].file_id, {
                caption: messageText,
                ...sendOptions,
              });
              successCount++;
            } catch (error) {
              console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
                error
              );
            }
          }
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        else if (msg.text) {
          // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–Ω–æ–ø–∫–∏
          const lines = msg.text.split("\n").map((line) => line.trim());
          let linkTitle = null;
          let linkUrl = null;
          let finalTextLines = [];

          for (const line of lines) {
            if (line.startsWith("LinkTitle=")) {
              linkTitle = line.replace("LinkTitle=", "").trim();
            } else if (line.startsWith("LinkUrl=")) {
              linkUrl = line.replace("LinkUrl=", "").trim();
            } else {
              finalTextLines.push(line);
            }
          }

          const messageText = finalTextLines.join("\n");

          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          const sendOptions = {
            parse_mode: "HTML",
          };

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
          if (linkTitle && linkUrl) {
            sendOptions.reply_markup = {
              inline_keyboard: [
                [
                  {
                    text: linkTitle,
                    url: linkUrl,
                  },
                ],
              ],
            };
          }

          // –†–∞—Å—Å—ã–ª–∞–µ–º
          for (const user of users) {
            try {
              await bot.sendMessage(user.telegramId, messageText, sendOptions);
              successCount++;
            } catch (error) {
              console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`,
                error
              );
            }
          }
        } else {
          // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
          await bot.sendMessage(
            chatId,
            "–°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ. " +
              "–î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –≤–ª–æ–∂–µ–Ω–∏–π."
          );
          return;
        }

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        isWaitingForMessage = false;
        await bot.sendMessage(
          chatId,
          `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ(—è) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã <b>${successCount}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`,
          { parse_mode: "HTML" }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.");
      }
    }
    // --- 2) –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤ ---
    else if (isWaitingForCoupons) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
      if (msg.text && msg.text.trim() === "-") {
        isWaitingForCoupons = false;
        return bot.sendMessage(chatId, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      }

      try {
        // –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        const newCoupons = msg.text
          .split("\n")
          .map((line) => line.trim())
          .filter((line) => line !== "");

        if (newCoupons.length === 0) {
          return bot.sendMessage(
            chatId,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ ¬´-¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
          );
        }

        fs.appendFileSync(codesFilePath, "\n" + newCoupons.join("\n"));

        isWaitingForCoupons = false;
        await bot.sendMessage(
          chatId,
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤: <b>${newCoupons.length}</b>`,
          { parse_mode: "HTML" }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤.");
      }
    }
  });
  // –ö–æ–º–∞–Ω–¥–∞ /plus –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–æ–≤
  bot.onText(/\/plus (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;

    if (chatId !== ADMIN_ID) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }

    try {
      const userId = parseInt(match[1], 10); // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const spinsToAdd = parseInt(match[2], 10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤

      if (isNaN(userId) || isNaN(spinsToAdd) || spinsToAdd <= 0) {
        return bot.sendMessage(
          chatId,
          "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤."
        );
      }

      const user = await User.findOne({ telegramId: userId });
      if (!user) {
        return bot.sendMessage(
          chatId,
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
        );
      }

      user.spins += spinsToAdd;
      await user.save();

      return bot.sendMessage(
        chatId,
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${spinsToAdd} —Å–ø–∏–Ω–æ–≤. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${user.spins}.`
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /plus:", error);
      return bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    }
  });
};

module.exports = { setupAdminHandlers };